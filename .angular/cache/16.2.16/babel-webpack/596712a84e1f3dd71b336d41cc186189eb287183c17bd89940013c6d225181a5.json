{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let RegisterComponent = class RegisterComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    // Define regex patterns\n    this.emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/; // Email regex\n    this.passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/; // Password regex\n    this.phonePattern = /^\\+?[1-9]\\d{1,14}$/; // Phone regex (international format)\n    // Initialize the form with regex patterns for validation\n    this.registerForm = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.pattern(this.emailPattern)]],\n      password: ['', [Validators.required, Validators.pattern(this.passwordPattern)]],\n      confirmPassword: ['', Validators.required],\n      phone: ['', [Validators.required, Validators.pattern(this.phonePattern)]],\n      role: ['Select a role', Validators.required] // Default value set to 'Select a role'\n    });\n  }\n\n  ngOnInit() {}\n  onSubmit() {\n    if (this.registerForm.valid) {\n      console.log(this.registerForm.value); // Handle form submission\n    } else {\n      console.log('Form is not valid'); // Handle validation errors\n    }\n  }\n};\n\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);","map":{"version":3,"names":["Component","Validators","RegisterComponent","constructor","formBuilder","emailPattern","passwordPattern","phonePattern","registerForm","group","firstName","required","lastName","email","pattern","password","confirmPassword","phone","role","ngOnInit","onSubmit","valid","console","log","value","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\marwa\\OneDrive\\Desktop\\MSG TASKS\\task1\\src\\app\\app.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup;\n\n  // Define regex patterns\n  private emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/; // Email regex\n  private passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/; // Password regex\n  private phonePattern = /^\\+?[1-9]\\d{1,14}$/; // Phone regex (international format)\n\n  constructor(private formBuilder: FormBuilder) {\n    // Initialize the form with regex patterns for validation\n    this.registerForm = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.pattern(this.emailPattern)]],\n      password: ['', [Validators.required, Validators.pattern(this.passwordPattern)]],\n      confirmPassword: ['', Validators.required],\n      phone: ['', [Validators.required, Validators.pattern(this.phonePattern)]],\n      role: ['Select a role', Validators.required] // Default value set to 'Select a role'\n    });\n  }\n\n  ngOnInit(): void {}\n\n  onSubmit(): void {\n    if (this.registerForm.valid) {\n      console.log(this.registerForm.value); // Handle form submission\n    } else {\n      console.log('Form is not valid'); // Handle validation errors\n    }\n  }\n}"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAO5D,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAQ5BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAL/B;IACQ,KAAAC,YAAY,GAAG,kDAAkD,CAAC,CAAC;IACnE,KAAAC,eAAe,GAAG,sEAAsE,CAAC,CAAC;IAC1F,KAAAC,YAAY,GAAG,oBAAoB,CAAC,CAAC;IAG3C;IACA,IAAI,CAACC,YAAY,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MACzCC,SAAS,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MACpCC,QAAQ,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACU,QAAQ,CAAC;MACnCE,KAAK,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACa,OAAO,CAAC,IAAI,CAACT,YAAY,CAAC,CAAC,CAAC;MACzEU,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACa,OAAO,CAAC,IAAI,CAACR,eAAe,CAAC,CAAC,CAAC;MAC/EU,eAAe,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACU,QAAQ,CAAC;MAC1CM,KAAK,EAAE,CAAC,EAAE,EAAE,CAAChB,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACa,OAAO,CAAC,IAAI,CAACP,YAAY,CAAC,CAAC,CAAC;MACzEW,IAAI,EAAE,CAAC,eAAe,EAAEjB,UAAU,CAACU,QAAQ,CAAC,CAAC;KAC9C,CAAC;EACJ;;EAEAQ,QAAQA,CAAA,GAAU;EAElBC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACZ,YAAY,CAACa,KAAK,EAAE;MAC3BC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACf,YAAY,CAACgB,KAAK,CAAC,CAAC,CAAC;KACvC,MAAM;MACLF,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAAC;;EAEtC;CACD;;AA9BYrB,iBAAiB,GAAAuB,UAAA,EAL7BzB,SAAS,CAAC;EACT0B,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACW1B,iBAAiB,CA8B7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}